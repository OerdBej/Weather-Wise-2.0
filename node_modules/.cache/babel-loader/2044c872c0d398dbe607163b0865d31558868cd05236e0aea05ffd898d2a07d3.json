{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/l/weather_wise_app/src/context/MyProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport sunImg from \"../assets/sunImg.png\";\nimport rainImg from \"../assets/rainImg.png\";\nimport windImg from \"../assets/windImg.png\";\nimport humidityImg from \"../assets/humidityImg.png\";\nimport uvindexImg from \"../assets/uv-indexImg.png\";\nimport { getCityLoc, getWeatherAndPollution } from \"../utils/apiCalls\";\nimport { getCyclingStatus } from \"../utils/sportsLogic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MyContext = /*#__PURE__*/React.createContext();\n\n//This finds the current date and hour.\nlet today = new Date();\nlet currentHour = today.getHours();\n\n//Date information for the UI current weather.\nconst weekday = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\nconst d = new Date();\nlet day = weekday[d.getDay()];\nconst MyProvider = props => {\n  _s();\n  //The states shows the user input recorded by the form\n  let [city, setCity] = useState(\"\");\n  //This state saves the data from the geolocation API call\n  let [location, setLocation] = useState({});\n  //This state shows when the city has been loaded and can be used to display information to the user.\n  let [showCity, setShowCity] = useState(false);\n\n  // If there is a error loading the city from user input\n  let [cityError, setCityError] = useState(false);\n\n  //This state saves the data from the weather API call\n  let [weather, setWeather] = useState({});\n\n  //This state converts the wind speed from m/s to km/h\n  let [crtWindSpeed, setCrtWindSpeed] = useState(0);\n\n  //This state shows when the weather API is finished\n  let [apiLoaded, setApiLoaded] = useState(false);\n\n  //This state updates the rating for cycling\n  //Todo should I put a number here to get it ready for a number?\n  let [cyclingRating, setCyclingRating] = useState();\n\n  //This state updates when the user selects a sport\n  let [sportSelected, setSportSelected] = useState(\"\");\n\n  //This state will be updated by the API call for air pollution\n  let [airPollution, setAirPollution] = useState({});\n  let [airPollutionDes, setAirPollutionDes] = useState(\"\");\n\n  //This state sets the color of the rating circle\n  // let [rateColour, setRateColour] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  //This handles the event change in the input for the city\n  //todo change name to something more unique\n  const handleChange = event => {\n    setCity(event.currentTarget.value);\n  };\n\n  //This handles the click from the location search\n  //Todo change name to something more unique\n  const handleClick = async () => {\n    try {\n      await geoLocCall();\n      navigate(\"/sport\");\n      setCity(\"\");\n      setCityError(false);\n    } catch (err) {\n      console.log(`This is from the handle click fn: ${err.message}`);\n      setCityError(true);\n      setCity(\"\");\n    }\n  };\n\n  //API Call\n  const geoLocCall = async () => {\n    try {\n      const data = await getCityLoc(city);\n      if (data.length === 0) throw new Error(\"There is a problem locating the city\");\n      setLocation(data);\n      setShowCity(true);\n      const [forecastData, pollutionData] = await getWeatherAndPollution(data[0].lat, data[0].lon);\n      if (forecastData === undefined || pollutionData === undefined) throw new Error(\"Problem with getting weather forecast and pollution\");\n      setWeather(forecastData);\n      setAirPollution(pollutionData.list[0].main.aqi);\n      setApiLoaded(true);\n      setCrtWindSpeed((forecastData.current.wind_speed * 3.6).toFixed(0));\n    } catch (err) {\n      //console.error(`There is an issue with the API call: ${err.message}`);\n      throw new Error(err.message);\n    }\n  };\n\n  //Air Pollution Quality\n  const handleAirPollution = () => {\n    const qualitativeName = [\"Good\", \"Fair\", \"Moderate\", \"Poor\", \"Very Poor\"];\n    let AirPollutionDes = qualitativeName[airPollution - 1];\n    setAirPollutionDes(AirPollutionDes);\n  };\n\n  //This function handles the click from the sport selected, it will take one parameter which is the sport selected.\n  const handlClickSport = sport => {\n    setSportSelected(sport);\n    handleMultiSport();\n    navigate(\"/rating\");\n  };\n\n  //This function handles\n  const handleMultiSport = () => {\n    handleAirPollution();\n    let totalRate = getCyclingStatus(weather.current.feels_like, crtWindSpeed, weather.hourly[0].pop, weather.current.uvi);\n    setCyclingRating(totalRate);\n  };\n\n  // const handleColorSelect = () => {\n  //     if (cyclingRating <= 3) {\n  //     setRateColour(\"Red\");\n  //   } else if (cyclingRating > 3 && cyclingRating <= 7) {\n  //     setRateColour(\"yellow\");\n  //   } else {\n  //     setRateColour(\"green\");\n  //   }\n  // }\n\n  //This is the method that handles the navigation to the current weather\n  const handleNavCurrentWeather = () => navigate(\"/current-weather\");\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      city: city,\n      location: location,\n      showCity: showCity,\n      weather: weather,\n      apiLoaded: apiLoaded,\n      cyclingRating: cyclingRating,\n      handleChange: handleChange,\n      handleClick: handleClick,\n      geoLocCall: geoLocCall,\n      handlClickSport: handlClickSport,\n      currentHour: currentHour,\n      handleNavCurrentWeather: handleNavCurrentWeather,\n      day: day,\n      sunImg: sunImg,\n      rainImg: rainImg,\n      windImg: windImg,\n      humidityImg: humidityImg,\n      uvindexImg: uvindexImg,\n      sportSelected: sportSelected,\n      airPollution: airPollution,\n      airPollutionDes: airPollutionDes,\n      crtWindSpeed: crtWindSpeed,\n      cityError: cityError\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(MyProvider, \"KQh3sekcbgsHlVIvMxlgtIabARc=\", false, function () {\n  return [useNavigate];\n});\n_c = MyProvider;\nexport default MyProvider;\nvar _c;\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"names":["React","useState","useNavigate","sunImg","rainImg","windImg","humidityImg","uvindexImg","getCityLoc","getWeatherAndPollution","getCyclingStatus","jsxDEV","_jsxDEV","MyContext","createContext","today","Date","currentHour","getHours","weekday","d","day","getDay","MyProvider","props","_s","city","setCity","location","setLocation","showCity","setShowCity","cityError","setCityError","weather","setWeather","crtWindSpeed","setCrtWindSpeed","apiLoaded","setApiLoaded","cyclingRating","setCyclingRating","sportSelected","setSportSelected","airPollution","setAirPollution","airPollutionDes","setAirPollutionDes","navigate","handleChange","event","currentTarget","value","handleClick","geoLocCall","err","console","log","message","data","length","Error","forecastData","pollutionData","lat","lon","undefined","list","main","aqi","current","wind_speed","toFixed","handleAirPollution","qualitativeName","AirPollutionDes","handlClickSport","sport","handleMultiSport","totalRate","feels_like","hourly","pop","uvi","handleNavCurrentWeather","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ubuntu/Desktop/l/weather_wise_app/src/context/MyProvider.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport sunImg from \"../assets/sunImg.png\";\nimport rainImg from \"../assets/rainImg.png\";\nimport windImg from \"../assets/windImg.png\";\nimport humidityImg from \"../assets/humidityImg.png\";\nimport uvindexImg from \"../assets/uv-indexImg.png\";\n\nimport { getCityLoc, getWeatherAndPollution } from \"../utils/apiCalls\";\nimport { getCyclingStatus } from \"../utils/sportsLogic\";\n\nexport const MyContext = React.createContext();\n\n//This finds the current date and hour.\nlet today = new Date();\nlet currentHour = today.getHours();\n\n//Date information for the UI current weather.\nconst weekday = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\n\nconst d = new Date();\nlet day = weekday[d.getDay()];\n\nconst MyProvider = (props) => {\n  //The states shows the user input recorded by the form\n  let [city, setCity] = useState(\"\");\n  //This state saves the data from the geolocation API call\n  let [location, setLocation] = useState({});\n  //This state shows when the city has been loaded and can be used to display information to the user.\n  let [showCity, setShowCity] = useState(false);\n\n  // If there is a error loading the city from user input\n  let [cityError, setCityError] = useState(false);\n\n  //This state saves the data from the weather API call\n  let [weather, setWeather] = useState({});\n\n  //This state converts the wind speed from m/s to km/h\n  let [crtWindSpeed, setCrtWindSpeed] = useState(0);\n\n  //This state shows when the weather API is finished\n  let [apiLoaded, setApiLoaded] = useState(false);\n\n  //This state updates the rating for cycling\n  //Todo should I put a number here to get it ready for a number?\n  let [cyclingRating, setCyclingRating] = useState();\n\n  //This state updates when the user selects a sport\n  let [sportSelected, setSportSelected] = useState(\"\");\n\n  //This state will be updated by the API call for air pollution\n  let [airPollution, setAirPollution] = useState({});\n  let [airPollutionDes, setAirPollutionDes] = useState(\"\");\n\n  //This state sets the color of the rating circle\n  // let [rateColour, setRateColour] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  //This handles the event change in the input for the city\n  //todo change name to something more unique\n  const handleChange = (event) => {\n    setCity(event.currentTarget.value);\n  };\n\n  //This handles the click from the location search\n  //Todo change name to something more unique\n  const handleClick = async () => {\n    try {\n      await geoLocCall();\n      navigate(\"/sport\");\n      setCity(\"\");\n      setCityError(false);\n    } catch (err) {\n      console.log(`This is from the handle click fn: ${err.message}`);\n      setCityError(true);\n      setCity(\"\");\n    }\n  };\n\n  //API Call\n  const geoLocCall = async () => {\n    try {\n      const data = await getCityLoc(city);\n      if (data.length === 0)\n        throw new Error(\"There is a problem locating the city\");\n      setLocation(data);\n      setShowCity(true);\n      const [forecastData, pollutionData] = await getWeatherAndPollution(\n        data[0].lat,\n        data[0].lon\n      );\n      if (forecastData === undefined || pollutionData === undefined)\n        throw new Error(\"Problem with getting weather forecast and pollution\");\n      setWeather(forecastData);\n      setAirPollution(pollutionData.list[0].main.aqi);\n      setApiLoaded(true);\n      setCrtWindSpeed((forecastData.current.wind_speed * 3.6).toFixed(0));\n    } catch (err) {\n      //console.error(`There is an issue with the API call: ${err.message}`);\n      throw new Error(err.message);\n    }\n  };\n\n  //Air Pollution Quality\n  const handleAirPollution = () => {\n    const qualitativeName = [\"Good\", \"Fair\", \"Moderate\", \"Poor\", \"Very Poor\"];\n    let AirPollutionDes = qualitativeName[airPollution - 1];\n    setAirPollutionDes(AirPollutionDes);\n  };\n\n  //This function handles the click from the sport selected, it will take one parameter which is the sport selected.\n  const handlClickSport = (sport) => {\n    setSportSelected(sport);\n    handleMultiSport();\n    navigate(\"/rating\");\n  };\n\n  //This function handles\n  const handleMultiSport = () => {\n    handleAirPollution();\n    let totalRate = getCyclingStatus(\n      weather.current.feels_like,\n      crtWindSpeed,\n      weather.hourly[0].pop,\n      weather.current.uvi\n    );\n    setCyclingRating(totalRate);\n  };\n\n  // const handleColorSelect = () => {\n  //     if (cyclingRating <= 3) {\n  //     setRateColour(\"Red\");\n  //   } else if (cyclingRating > 3 && cyclingRating <= 7) {\n  //     setRateColour(\"yellow\");\n  //   } else {\n  //     setRateColour(\"green\");\n  //   }\n  // }\n\n  //This is the method that handles the navigation to the current weather\n  const handleNavCurrentWeather = () => navigate(\"/current-weather\");\n\n  return (\n    <MyContext.Provider\n      value={{\n        city: city,\n        location: location,\n        showCity: showCity,\n        weather: weather,\n        apiLoaded: apiLoaded,\n        cyclingRating: cyclingRating,\n        handleChange: handleChange,\n        handleClick: handleClick,\n        geoLocCall: geoLocCall,\n        handlClickSport: handlClickSport,\n        currentHour: currentHour,\n        handleNavCurrentWeather: handleNavCurrentWeather,\n        day: day,\n        sunImg: sunImg,\n        rainImg: rainImg,\n        windImg: windImg,\n        humidityImg: humidityImg,\n        uvindexImg: uvindexImg,\n        sportSelected: sportSelected,\n        airPollution: airPollution,\n        airPollutionDes: airPollutionDes,\n        crtWindSpeed: crtWindSpeed,\n        cityError: cityError,\n      }}\n    >\n      {props.children}\n    </MyContext.Provider>\n  );\n};\n\nexport default MyProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,UAAU,MAAM,2BAA2B;AAElD,SAASC,UAAU,EAAEC,sBAAsB,QAAQ,mBAAmB;AACtE,SAASC,gBAAgB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,OAAO,MAAMC,SAAS,gBAAGb,KAAK,CAACc,aAAa,CAAC,CAAC;;AAE9C;AACA,IAAIC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;AACtB,IAAIC,WAAW,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC;;AAElC;AACA,MAAMC,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC;AAEpE,MAAMC,CAAC,GAAG,IAAIJ,IAAI,CAAC,CAAC;AACpB,IAAIK,GAAG,GAAGF,OAAO,CAACC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;AAE7B,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B;EACA,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAClC;EACA,IAAI,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C;EACA,IAAI,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,IAAI,CAAC+B,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,IAAI,CAACiC,OAAO,EAAEC,UAAU,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExC;EACA,IAAI,CAACmC,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACA,IAAI,CAACqC,SAAS,EAAEC,YAAY,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA;EACA,IAAI,CAACuC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxC,QAAQ,CAAC,CAAC;;EAElD;EACA,IAAI,CAACyC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,IAAI,CAAC2C,YAAY,EAAEC,eAAe,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,IAAI,CAAC6C,eAAe,EAAEC,kBAAkB,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA;;EAEA,MAAM+C,QAAQ,GAAG9C,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,MAAM+C,YAAY,GAAIC,KAAK,IAAK;IAC9BvB,OAAO,CAACuB,KAAK,CAACC,aAAa,CAACC,KAAK,CAAC;EACpC,CAAC;;EAED;EACA;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,UAAU,CAAC,CAAC;MAClBN,QAAQ,CAAC,QAAQ,CAAC;MAClBrB,OAAO,CAAC,EAAE,CAAC;MACXM,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZC,OAAO,CAACC,GAAG,CAAC,qCAAqCF,GAAG,CAACG,OAAO,EAAE,CAAC;MAC/DzB,YAAY,CAAC,IAAI,CAAC;MAClBN,OAAO,CAAC,EAAE,CAAC;IACb;EACF,CAAC;;EAED;EACA,MAAM2B,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMK,IAAI,GAAG,MAAMnD,UAAU,CAACkB,IAAI,CAAC;MACnC,IAAIiC,IAAI,CAACC,MAAM,KAAK,CAAC,EACnB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MACzDhC,WAAW,CAAC8B,IAAI,CAAC;MACjB5B,WAAW,CAAC,IAAI,CAAC;MACjB,MAAM,CAAC+B,YAAY,EAAEC,aAAa,CAAC,GAAG,MAAMtD,sBAAsB,CAChEkD,IAAI,CAAC,CAAC,CAAC,CAACK,GAAG,EACXL,IAAI,CAAC,CAAC,CAAC,CAACM,GACV,CAAC;MACD,IAAIH,YAAY,KAAKI,SAAS,IAAIH,aAAa,KAAKG,SAAS,EAC3D,MAAM,IAAIL,KAAK,CAAC,qDAAqD,CAAC;MACxE1B,UAAU,CAAC2B,YAAY,CAAC;MACxBjB,eAAe,CAACkB,aAAa,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC;MAC/C9B,YAAY,CAAC,IAAI,CAAC;MAClBF,eAAe,CAAC,CAACyB,YAAY,CAACQ,OAAO,CAACC,UAAU,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,OAAOjB,GAAG,EAAE;MACZ;MACA,MAAM,IAAIM,KAAK,CAACN,GAAG,CAACG,OAAO,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,eAAe,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,CAAC;IACzE,IAAIC,eAAe,GAAGD,eAAe,CAAC9B,YAAY,GAAG,CAAC,CAAC;IACvDG,kBAAkB,CAAC4B,eAAe,CAAC;EACrC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjClC,gBAAgB,CAACkC,KAAK,CAAC;IACvBC,gBAAgB,CAAC,CAAC;IAClB9B,QAAQ,CAAC,SAAS,CAAC;EACrB,CAAC;;EAED;EACA,MAAM8B,gBAAgB,GAAGA,CAAA,KAAM;IAC7BL,kBAAkB,CAAC,CAAC;IACpB,IAAIM,SAAS,GAAGrE,gBAAgB,CAC9BwB,OAAO,CAACoC,OAAO,CAACU,UAAU,EAC1B5C,YAAY,EACZF,OAAO,CAAC+C,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,EACrBhD,OAAO,CAACoC,OAAO,CAACa,GAClB,CAAC;IACD1C,gBAAgB,CAACsC,SAAS,CAAC;EAC7B,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMK,uBAAuB,GAAGA,CAAA,KAAMpC,QAAQ,CAAC,kBAAkB,CAAC;EAElE,oBACEpC,OAAA,CAACC,SAAS,CAACwE,QAAQ;IACjBjC,KAAK,EAAE;MACL1B,IAAI,EAAEA,IAAI;MACVE,QAAQ,EAAEA,QAAQ;MAClBE,QAAQ,EAAEA,QAAQ;MAClBI,OAAO,EAAEA,OAAO;MAChBI,SAAS,EAAEA,SAAS;MACpBE,aAAa,EAAEA,aAAa;MAC5BS,YAAY,EAAEA,YAAY;MAC1BI,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBsB,eAAe,EAAEA,eAAe;MAChC3D,WAAW,EAAEA,WAAW;MACxBmE,uBAAuB,EAAEA,uBAAuB;MAChD/D,GAAG,EAAEA,GAAG;MACRlB,MAAM,EAAEA,MAAM;MACdC,OAAO,EAAEA,OAAO;MAChBC,OAAO,EAAEA,OAAO;MAChBC,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAEA,UAAU;MACtBmC,aAAa,EAAEA,aAAa;MAC5BE,YAAY,EAAEA,YAAY;MAC1BE,eAAe,EAAEA,eAAe;MAChCV,YAAY,EAAEA,YAAY;MAC1BJ,SAAS,EAAEA;IACb,CAAE;IAAAsD,QAAA,EAED9D,KAAK,CAAC8D;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEzB,CAAC;AAACjE,EAAA,CAvJIF,UAAU;EAAA,QAkCGrB,WAAW;AAAA;AAAAyF,EAAA,GAlCxBpE,UAAU;AAyJhB,eAAeA,UAAU;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}