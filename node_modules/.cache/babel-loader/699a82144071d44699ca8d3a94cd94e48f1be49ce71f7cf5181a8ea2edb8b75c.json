{"ast":null,"code":"//The real feel temp variables\nconst tempStartValue = 26;\nconst totalTempDif = 12;\nconst tempStartRate = 3;\n\n//The wind variables\nconst totalWindDif = 20;\nconst windStartValue = 6;\nconst windStartRate = 3;\n\n//The probability of rain variables\nconst popStartValue = 0;\nconst totalPopDif = 0.6;\nconst popStartRate = 3;\n\n//The UV Index variables\nconst uvStartValue = 0;\nconst totalUvDif = 6;\nconst uvStartRate = 1;\n\n//The first function is the master which controls the percentage rating system set-up it can be used for all the weather parameters passed in\nconst master = (currentWeather, rangeStart, totalDif, StartRate) => {\n  let increase = currentWeather - rangeStart;\n  let increasePer = increase / totalDif;\n  let reduction = StartRate * increasePer;\n  let newRate = StartRate - reduction;\n  return newRate;\n};\nexport const getCyclingStatus = (weatherFeelsLike, weatherWindSpeed, weatherPop, weatherUv) => {\n  let currentTemp = weatherFeelsLike;\n  let currentWindSpeed = weatherWindSpeed;\n  let currentPoP = weatherPop;\n  let currentUv = weatherUv;\n  let tempFinRate = currentTemp > tempStartValue ? master(currentTemp, tempStartValue, totalTempDif, tempStartRate) : tempStartRate;\n  let windFinRate = currentWindSpeed > windStartValue ? master(currentWindSpeed, windStartValue, totalWindDif, windStartRate) : tempStartRate;\n  let popFinRate = master(currentPoP, popStartValue, totalPopDif, popStartRate);\n  let uvFinRate = master(currentUv, uvStartValue, totalUvDif, uvStartRate);\n  const totalRate = tempFinRate + windFinRate + popFinRate + uvFinRate;\n  return totalRate.toFixed(0);\n};","map":{"version":3,"names":["tempStartValue","totalTempDif","tempStartRate","totalWindDif","windStartValue","windStartRate","popStartValue","totalPopDif","popStartRate","uvStartValue","totalUvDif","uvStartRate","master","currentWeather","rangeStart","totalDif","StartRate","increase","increasePer","reduction","newRate","getCyclingStatus","weatherFeelsLike","weatherWindSpeed","weatherPop","weatherUv","currentTemp","currentWindSpeed","currentPoP","currentUv","tempFinRate","windFinRate","popFinRate","uvFinRate","totalRate","toFixed"],"sources":["/home/ubuntu/Desktop/l/weather_wise_app/src/utils/sportsLogic.jsx"],"sourcesContent":["//The real feel temp variables\nconst tempStartValue = 26;\nconst totalTempDif = 12;\nconst tempStartRate = 3; \n\n//The wind variables\nconst totalWindDif = 20;\nconst windStartValue = 6;\nconst windStartRate = 3;\n\n//The probability of rain variables\nconst popStartValue = 0;\nconst totalPopDif = 0.6;\nconst popStartRate = 3;\n\n//The UV Index variables\nconst uvStartValue = 0;\nconst totalUvDif = 6;\nconst uvStartRate = 1;\n\n//The first function is the master which controls the percentage rating system set-up it can be used for all the weather parameters passed in\nconst master = (currentWeather, rangeStart, totalDif, StartRate) => {\n    let increase = currentWeather - rangeStart;\n    let increasePer = increase/totalDif;\n    let reduction = (StartRate * increasePer);\n    let newRate = (StartRate - reduction);\n\n    return newRate;\n  }\n\n  export const getCyclingStatus = (weatherFeelsLike, weatherWindSpeed, weatherPop, weatherUv) => {\n    let currentTemp = weatherFeelsLike;\n    let currentWindSpeed = weatherWindSpeed;\n    let currentPoP = weatherPop;\n    let currentUv = weatherUv;\n\n    let tempFinRate = currentTemp > tempStartValue ? master(currentTemp, tempStartValue, totalTempDif, tempStartRate) : tempStartRate;\n\n    let windFinRate = currentWindSpeed > windStartValue ? master(currentWindSpeed, windStartValue, totalWindDif, windStartRate) : tempStartRate;\n\n    let popFinRate = master(currentPoP, popStartValue, totalPopDif, popStartRate);\n\n    let uvFinRate = master(currentUv, uvStartValue, totalUvDif, uvStartRate);\n\n    const totalRate = tempFinRate + windFinRate + popFinRate + uvFinRate;\n\n    return totalRate.toFixed(0);\n  }"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,EAAE;AACzB,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,cAAc,GAAG,CAAC;AACxB,MAAMC,aAAa,GAAG,CAAC;;AAEvB;AACA,MAAMC,aAAa,GAAG,CAAC;AACvB,MAAMC,WAAW,GAAG,GAAG;AACvB,MAAMC,YAAY,GAAG,CAAC;;AAEtB;AACA,MAAMC,YAAY,GAAG,CAAC;AACtB,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,WAAW,GAAG,CAAC;;AAErB;AACA,MAAMC,MAAM,GAAGA,CAACC,cAAc,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,KAAK;EAChE,IAAIC,QAAQ,GAAGJ,cAAc,GAAGC,UAAU;EAC1C,IAAII,WAAW,GAAGD,QAAQ,GAACF,QAAQ;EACnC,IAAII,SAAS,GAAIH,SAAS,GAAGE,WAAY;EACzC,IAAIE,OAAO,GAAIJ,SAAS,GAAGG,SAAU;EAErC,OAAOC,OAAO;AAChB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,gBAAgB,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,SAAS,KAAK;EAC7F,IAAIC,WAAW,GAAGJ,gBAAgB;EAClC,IAAIK,gBAAgB,GAAGJ,gBAAgB;EACvC,IAAIK,UAAU,GAAGJ,UAAU;EAC3B,IAAIK,SAAS,GAAGJ,SAAS;EAEzB,IAAIK,WAAW,GAAGJ,WAAW,GAAG1B,cAAc,GAAGY,MAAM,CAACc,WAAW,EAAE1B,cAAc,EAAEC,YAAY,EAAEC,aAAa,CAAC,GAAGA,aAAa;EAEjI,IAAI6B,WAAW,GAAGJ,gBAAgB,GAAGvB,cAAc,GAAGQ,MAAM,CAACe,gBAAgB,EAAEvB,cAAc,EAAED,YAAY,EAAEE,aAAa,CAAC,GAAGH,aAAa;EAE3I,IAAI8B,UAAU,GAAGpB,MAAM,CAACgB,UAAU,EAAEtB,aAAa,EAAEC,WAAW,EAAEC,YAAY,CAAC;EAE7E,IAAIyB,SAAS,GAAGrB,MAAM,CAACiB,SAAS,EAAEpB,YAAY,EAAEC,UAAU,EAAEC,WAAW,CAAC;EAExE,MAAMuB,SAAS,GAAGJ,WAAW,GAAGC,WAAW,GAAGC,UAAU,GAAGC,SAAS;EAEpE,OAAOC,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}